---
- name: Import optional extra_args file
  include_vars: "{{ item }}"
  ignore_errors: yes
  with_first_found:
    - files:
      - "../extra_vars.yml"
      - "../extra_vars.yaml"
      - "../extra_vars.json"
      skip: true
  tags: vars

# Distro specific
- name: Install dependencies
  include_tasks: install-deps/main.yml

- name: Get username we are using
  command:
    cmd: whoami
  register: username_on_target
  when:
    - infer_uid_and_group|bool

- name: set target user as a fact
  set_fact:
    target_user: "{{ username_on_target.stdout }}"
  when:
    - infer_uid_and_group|bool

- name: Run getent againt that the inferred target user
  getent:
    database: passwd
    key: "{{ target_user }}"
  register: getent_running_user
  when:
    - infer_uid_and_group|bool

- name: Run getent againt the inferred target group
  getent:
    database: group
    key: "{{ target_user }}"
  register: getent_on_group
  when:
    - infer_uid_and_group|bool

- name: Override user and group with inferred settings if feature is enabled
  set_fact:
    user: "hplip"
    data_user: "{{ target_user }}"
    data_group: "{{ ((getent_on_group.values() | first).values() | first).keys() | first }}"
  when:
    - infer_uid_and_group|bool

- name: Create {{ data_path }} partition if not created yet
  include_role:
    name: mcgrof.create_partition
  vars:
    disk_setup_device: "{{ data_device }}"
    disk_setup_fstype: "{{ data_fstype }}"
    disk_setup_label: "{{ data_label }}"
    disk_setup_fs_opts: "{{ data_fs_opts }}"
    disk_setup_path: "{{ data_path }}"
    disk_setup_user: "{{ data_user }}"
    disk_setup_group: "{{ data_group }}"
  tags: [ 'data_partition' ]

# Distro agnostic stuff to build and boot Linux goes below

- name: git clone {{ target_linux_tree }}
  git:
    repo: "{{ target_linux_git }}"
    dest: "{{ target_linux_dir_path }}"
    update: yes
    version: "{{ target_linux_tag }}"
  tags: [ 'linux', 'git', 'clone']

- name: Copy kernel delta if requested
  template:
    src: "{{ target_linux_extra_patch }}"
    dest: "{{ target_linux_dir_path }}/{{ target_linux_extra_patch }}"
    owner: "{{ data_user }}"
    group: "{{ data_group }}"
    mode: 0644
  tags: [ 'linux', 'git', 'config' ]
  when: target_linux_extra_patch is defined

- name: Apply kernel delta if requested
  command: "git am {{ target_linux_extra_patch }}"
  args:
    chdir: "{{ target_linux_dir_path }}"
  tags: [ 'linux', 'extra-patch', 'skip_ansible_lint' ]
  when: target_linux_extra_patch is defined

- name: Copy configuration for linux {{ target_linux_tree }}
  template:
    src: "{{ target_linux_config }}"
    dest: "{{ target_linux_dir_path }}/.config"
    owner: "{{ data_user }}"
    group: "{{ data_group }}"
    mode: 0644
  tags: [ 'linux', 'git', 'config' ]

- name: Configure linux {{ target_linux_tree }}
  shell: |
    set -o pipefail
    yes "" | make oldconfig
  register: configure_done
  changed_when: configure_done.rc == 0 or configure_done.rc == 141
  failed_when: configure_done.rc != 0 and configure_done.rc != 141
  args:
    chdir: "{{ target_linux_dir_path }}"
    executable: /bin/bash
  tags: [ 'linux', 'oldconfig' ]

- name: Build linux {{ target_linux_tree }}
  command: "{{ target_linux_make_cmd }}"
  register: build
  changed_when: "build.rc == 0"
  args:
    chdir: "{{ target_linux_dir_path }}"
  tags: [ 'linux', 'build-linux' ]

# Say you want to remove a kernel you no longer care for:
# ansible-playbook -i hosts --tags uninstall-linux --extra-vars "uninstall_kernel_ver=4.19.58" bootlinux.yml
- name: Uninstall an old version of linux manually specified
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  file:
    state: absent
    path: "{{ item }}"
  tags: [ 'linux', 'uninstall-linux' ]
  with_items:
    - "/boot/vmlinuz-{{ uninstall_kernel_ver }}"
    - "/boot/vmlinuz-{{ uninstall_kernel_ver }}.old"
    - "/boot/initrd.img-{{ uninstall_kernel_ver }}"
    - "/boot/initrd.img-{{ uninstall_kernel_ver }}.old"
    - "/boot/config-{{ uninstall_kernel_ver }}"
    - "/boot/config-{{ uninstall_kernel_ver }}.old"
    - "/boot/System.map-{{ uninstall_kernel_ver }}"
    - "/boot/System.map-{{ uninstall_kernel_ver }}.old"
    - "/lib/modules/{{ uninstall_kernel_ver }}"
  loop_control:
    label: "{{ item }}"
  when: uninstall_kernel_ver is defined

- name: Update your boot grub file if necessary
  tags: [ 'linux', 'uninstall-linux', 'manual-update-grub' ]
  import_tasks: update-grub/main.yml
  when: (manual_update_grub is defined) or (uninstall_kernel_ver is defined)

- name: Install linux {{ target_linux_tree }}
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "{{ target_linux_make_install_cmd }}"
  register: install_done
  changed_when: "install_done.rc == 0"
  args:
    chdir: "{{ target_linux_dir_path }}"
  tags: [ 'linux', 'install-linux' ]

- name: Reboot into linux {{ target_linux_tree }}
  become: yes
  become_method: sudo
  reboot:
  tags: [ 'linux', 'reboot' ]
